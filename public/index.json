[{"content":"","date":null,"permalink":"/","section":"","summary":"","title":""},{"content":"All my blogs\n","date":null,"permalink":"/posts/","section":"Blog","summary":"All my blogs","title":"Blog"},{"content":"Preamble #Every time I get a new MacBook—usually when I switch jobs—I find myself facing the familiar challenge of configuring it just the way I like. The process is tedious, often error-prone, and, to make matters worse, I have to go through it every few years. On top of this, I manage two Linux home servers and one cloud instance for my hobby projects. The effort to \u0026ldquo;opinionate\u0026rdquo; my machines has only grown as I keep adding new tools to my daily workflow.\nMy journey toward automating the bootstrapping of my machines began with a simple list of software and tools, meticulously maintained in a Notion page. I\u0026rsquo;d use Homebrew for macOS and Apt for Debian to install these tools. Before long, I started writing small Bash scripts—little snippets scattered throughout my Notion page. I even jotted down pseudocode to remind myself of the order in which configurations needed to be applied. Writing a full-fledged Bash script, however, felt overwhelming, so I stuck with my semi-automated solution, hoping one day I\u0026rsquo;d find the right tool.\nEarly in my career, I stumbled upon Zsh and Powerlevel10k, which made my shell look incredibly cool and \u0026ldquo;hippie.\u0026rdquo; But at the time, I had no idea about the underlying complexity of this highly opinionated framework. Over the years, I started craving simplicity and more control over my shell environment, so I ditched Powerlevel and began from scratch. Naturally, I kept a list of must-have Zsh plugins in my trusty Notion page.\nAround this time, I also began experimenting with terminal multiplexers like Tmux and Screen on my home servers. I loved how they allowed me to switch between different windows and panes with just a few keystrokes. I was still using iTerm on my Mac, but Tmux enabled me to manage everything within a single iTerm window, making it an indispensable part of my daily routine. After jostling with many terminal applications, I ended up choosing Alacritty which can be customized using a toml file. I even customized the leader key in Tmux, among other things, to better suit my needs—yet another addition to my ever-expanding Notion page.\nThen came one cold Toronto night when I decided, with some reluctance, to give Vim a try. At first, I hated everything about it. It slowed me down, made me less productive, and was sheer agony to use. But the pros on the internet assured me that this was a normal reaction during the early learning phase. They were right. Soon, I started to get the hang of Vim motions, and my productivity began to increase, almost exponentially. I found myself enjoying coding in Vim.\nEnter Neovim. My world turned upside down when I discovered Neovim. I started tinkering with Neovim\u0026rsquo;s configuration, which is written in Lua. I added numerous plugins to replicate the features I had grown accustomed to in other IDEs like IntelliJ and VSCode. To my surprise, I found Neovim\u0026rsquo;s plugins superior to those of other IDEs. And the low memory footprint? An absolute game-changer.\nThroughout this journey, I uncovered a treasure trove of other handy tools, like Lazygit and Delta (a git diff tool), and my curated list of software on Notion grew even longer.\nMy semi-automated solution for maintaining this list of essential tools started to feel inadequate. It was time to fully automate the process—or at least, that’s what I thought.\nAutomation: Phase 1 #It occurred to me that I couldn\u0026rsquo;t be the only one facing this challenge, so I turned to the internet, searching for hints and insights into how others were solving it. That\u0026rsquo;s when I stumbled upon the concept of \u0026ldquo;dotfiles.\u0026rdquo; Intrigued, I meticulously gathered all my dotfiles and placed them in a GitHub repository, which allowed me to clone them across all my machines. However, the process of manually symlinking each one was still incredibly tedious.\nThen one day, I discovered GNU Stow—a true breakthrough moment. Stow made the symlinking process a breeze, and suddenly, what once felt like a chore became a simple, almost enjoyable task.\nMy dotfiles directory started looking like this:\n├── config │ └── .config │ ├── alacritty │ │ └── alacritty.toml │ ├── nvim │ │ └── init.lua │ └── tmux │ └── tmux.conf ├── vim │ └── .vimrc └── zsh └── .zshrc stow config vim zsh While I was mostly satisfied with this solution—especially since my dotfiles were now automated—I still found myself manually applying many other changes that I had carefully curated in my Notion page.\nAutomation: Phase 2 #I wasn\u0026rsquo;t fully satisfied with my solution, so I decided to write a Bash script. While it got the job done, it was messy and difficult to read. Every time I revisited the script after a few months, I found myself pulling my hair out trying to make sense of it. I wanted something better—something more readable, something declarative. And then, I found Ansible. Another game changer. I migrated my Bash script to Ansible, and everything started to fall into place.\nansible/bootstrap_mac.yaml\n--- - name: Bootstrap Mac hosts: hosts connection: local vars_files: - vault/secret.yml tasks: - name: Set a hostname become: true ansible.builtin.hostname: name: \u0026#34;{{ host_name }}\u0026#34; - name: Install core packages with Homebrew ansible.builtin.package: name: - curl - git - gnupg state: latest - name: Install packages with Homebrew ansible.builtin.package: name: - alacritty - antigen - dust - firefox - fzf - gh - git-delta - gnu-sed - jq - lazygit - neovim - notion - ripgrep - stow - tmux - zsh - ... state: latest - name: Stow dotfiles ansible.builtin.shell: cmd: cd $HOME/dotfiles \u0026amp;\u0026amp; stow {{ item }} loop: - config - vim - zsh ansible-playbook --become-password-file become.txt --vault-password-file vault.txt -i hosts -l personal bootstrap_mac.yml I decided to create a separate file for Linux as well.\nMoreover, for MacOS, I used the defaults tool to set some OS level configurations which are also belong to the Ansible playbook.\ndefaults write com.apple.dock \u0026#34;tilesize\u0026#34; -int \u0026#34;26\u0026#34; \u0026amp;\u0026amp; killall Dock defaults write com.apple.dock \u0026#34;autohide\u0026#34; -bool \u0026#34;true\u0026#34; \u0026amp;\u0026amp; killall Dock defaults write com.apple.dock \u0026#34;orientation\u0026#34; -string \u0026#34;left\u0026#34; \u0026amp;\u0026amp; killall Dock defaults write com.apple.dock \u0026#34;autohide-time-modifier\u0026#34; -float \u0026#34;0\u0026#34; \u0026amp;\u0026amp; killall Dock defaults write com.apple.finder \u0026#34;ShowPathbar\u0026#34; -bool \u0026#34;true\u0026#34; \u0026amp;\u0026amp; killall Finder defaults write com.apple.finder \u0026#34;FXPreferredViewStyle\u0026#34; -string \u0026#34;clmv\u0026#34; \u0026amp;\u0026amp; killall Finder defaults write com.apple.finder \u0026#34;FXDefaultSearchScope\u0026#34; -string \u0026#34;SCcf\u0026#34; \u0026amp;\u0026amp; killall Finder defaults write com.apple.finder \u0026#34;FXRemoveOldTrashItems\u0026#34; -bool \u0026#34;true\u0026#34; \u0026amp;\u0026amp; killall Finder defaults write com.apple.menuextra.clock \u0026#34;DateFormat\u0026#34; -string \u0026#34;\\\u0026#34;EEE d MMM h:mm\\\u0026#34;\u0026#34; To make things easier, I wrapped everything in a bash script:\n#!/bin/bash if [ \u0026#34;$#\u0026#34; -ne 2 ]; then echo \u0026#34;Usage: $0 {mac|linux} {machine_name}\u0026#34; exit 1 fi TYPE=$1 MACHINE_NAME=$2 echo \u0026#34;Bootstrapping $TYPE machine: $MACHINE_NAME...\u0026#34; PYTHON_VERSION=\u0026#34;3.12.5\u0026#34; BECOME_FILE=\u0026#34;ansible/become.txt\u0026#34; VAULT_FILE=\u0026#34;ansible/vault.txt\u0026#34; INVENTORY=\u0026#34;ansible/inventory.ini\u0026#34; # Function to install build dependencies on Linux install_linux_dependencies() { echo \u0026#34;Installing build dependencies on Linux...\u0026#34; sudo apt-get update sudo apt-get install -y build-essential python-tk python3-tk tk-dev zlib1g-dev libffi-dev libssl-dev libbz2-dev libreadline-dev libsqlite3-dev liblzma-dev libncurses-dev } # Function to install pyenv on all platforms install_pyenv() { echo \u0026#34;Installing pyenv...\u0026#34; if ! command -v pyenv \u0026amp;\u0026gt; /dev/null; then curl https://pyenv.run | bash export PATH=\u0026#34;$HOME/.pyenv/bin:$PATH\u0026#34; eval \u0026#34;$(pyenv init --path)\u0026#34; eval \u0026#34;$(pyenv init -)\u0026#34; else echo \u0026#34;pyenv is already installed.\u0026#34; fi echo \u0026#34;Installing Python $PYTHON_VERSION...\u0026#34; pyenv install $PYTHON_VERSION --skip-existing pyenv global $PYTHON_VERSION } # Function to install Ansible via pip install_ansible() { echo \u0026#34;Checking if pip is installed...\u0026#34; if python3 -m pip -V \u0026amp;\u0026gt; /dev/null; then echo \u0026#34;pip is installed.\u0026#34; else echo \u0026#34;pip is not installed. Please install pip before proceeding.\u0026#34; exit 1 fi echo \u0026#34;Installing Ansible...\u0026#34; python3 -m pip install --user ansible } # Function to install or update Homebrew on macOS install_homebrew() { echo \u0026#34;Checking if Homebrew is installed...\u0026#34; if ! command -v brew \u0026amp;\u0026gt; /dev/null; then echo \u0026#34;Installing Homebrew...\u0026#34; /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; eval \u0026#34;$(/opt/homebrew/bin/brew shellenv)\u0026#34; else echo \u0026#34;Homebrew is already installed. Updating Homebrew...\u0026#34; brew update fi } case $TYPE in mac) install_homebrew install_pyenv install_ansible ansible-playbook --become-password-file \u0026#34;$BECOME_FILE\u0026#34; --vault-password-file \u0026#34;$VAULT_FILE\u0026#34; -i \u0026#34;$INVENTORY\u0026#34; -l \u0026#34;$MACHINE_NAME\u0026#34; ansible/bootstrap_mac.yml echo \u0026#34;Bootstrapping complete ✅\u0026#34; ;; linux) install_linux_dependencies install_pyenv install_ansible ansible-playbook --become-password-file \u0026#34;$BECOME_FILE\u0026#34; --vault-password-file \u0026#34;$VAULT_FILE\u0026#34; -i \u0026#34;$INVENTORY\u0026#34; -l \u0026#34;$MACHINE_NAME\u0026#34; ansible/bootstrap_linux.yml echo \u0026#34;Bootstrapping complete ✅\u0026#34; ;; *) echo \u0026#34;Invalid type: $TYPE. Use \u0026#39;mac\u0026#39; or \u0026#39;linux\u0026#39;.\u0026#34; exit 1 ;; esac ./bootstrap.sh mac personal ./bootstrap.sh linux homeserver Looking back, it\u0026rsquo;s been quite the journey—from the frustration of manual configurations to discovering tools that transformed the way I manage my machines. Each step brought me closer to the streamlined, automated process I had always envisioned. With Ansible in place, I finally feel like I\u0026rsquo;ve cracked the code. But in the ever-evolving world of tech, I\u0026rsquo;m sure there are more discoveries to be made, more tools to uncover, and more ways to refine my setup. And that\u0026rsquo;s what keeps this journey exciting—there\u0026rsquo;s always something new around the corner.\n","date":"25 January 2024","permalink":"/posts/bootstrapping-my-machines/","section":"Blog","summary":"How I use various tools to automate the process of bootstrapping my machines.","title":"Bootstrapping my machines"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/tech/","section":"Tags","summary":"","title":"Tech"},{"content":"","date":null,"permalink":"/tags/tools/","section":"Tags","summary":"","title":"Tools"},{"content":"","date":null,"permalink":"/tags/about/","section":"Tags","summary":"","title":"About"},{"content":" Congo brings your content to life. 😍 This is a simple about page. It\u0026rsquo;s written in markdown.\nA Software Engineer by profession. I am passionate about technology and love to learn new things. I have been working in the software industry for more than 10 years. I have experience in developing web applications, mobile applications, and desktop applications. I have worked with various technologies like Java, Python, JavaScript, React, Angular, and Node.js.\n","date":null,"permalink":"/about/","section":"","summary":"Congo brings your content to life.","title":"About"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/first/","section":"Tags","summary":"","title":"First"},{"content":"","date":null,"permalink":"/tags/new/","section":"Tags","summary":"","title":"New"},{"content":"Books #Technical # The Pragmatic Programmer Clean Code The Clean Coder The Phoenix Project The Unicorn Project The DevOps Handbook Non-Technical # Sapiens: A Brief History of Humankind Homo Deus: A Brief History of Tomorrow Dune The Metamorphosis of Prime Intellect Articles # The Twelve-Factor App The Cathedral and the Bazaar Papers #Distributed Systems # MapReduce: Simplified Data Processing on Large Clusters Bigtable: A Distributed Storage System for Structured Data Dynamo: Amazon’s Highly Available Key-value Store Spanner: Google’s Globally-Distributed Database The Tail at Scale The Datacenter as a Computer: An Introduction to the Design of Warehouse-Scale Machines Machine Learning and AI # Attention is All You Need ","date":null,"permalink":"/readings/","section":"","summary":"Books #Technical # The Pragmatic Programmer Clean Code The Clean Coder The Phoenix Project The Unicorn Project The DevOps Handbook Non-Technical # Sapiens: A Brief History of Humankind Homo Deus: A Brief History of Tomorrow Dune The Metamorphosis of Prime Intellect Articles # The Twelve-Factor App The Cathedral and the Bazaar Papers #Distributed Systems # MapReduce: Simplified Data Processing on Large Clusters Bigtable: A Distributed Storage System for Structured Data Dynamo: Amazon’s Highly Available Key-value Store Spanner: Google’s Globally-Distributed Database The Tail at Scale The Datacenter as a Computer: An Introduction to the Design of Warehouse-Scale Machines Machine Learning and AI # Attention is All You Need ","title":"Readings"},{"content":"","date":null,"permalink":"/tags/welcome/","section":"Tags","summary":"","title":"Welcome"}]